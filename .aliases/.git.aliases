# Git stuff

#A# Git;giturl;Opens file from a git repo in github/gitlab web UI

#A# Git;gcm;Git Checkout Master
#A# Git;gcheckout;Git Checkout ...
#A# Git;gstatus;Git status
#A# Git;glog;Git log (pretty)

#A# Git;gadd;Git status
#A# Git;gunstage;Unstages file(s) (git reset HEAD)
#A# Git;grevert;Revert file(s) (git checkout --)
#A# Git;stash;git stash save
#A# Git;unstash;git stash pop
#A# Git;stashlist;git stash list
#A# Git;stashshow;git stash show
#A# Git;gpull;git ~EMP~pull~NORM~ --rebase
#A# Git;gcommit;git commit
#A# Git;gpush;git push (branch only)

#A# Navigation;cdroot;Jumps to Git Repo root



function giturl {
    tree="/-/tree/"
    base_url=$(git remote -v | head -n 1 | awk '{print $2}'  | tr ':' '/'| sed 's|git@|https://|' | sed 's|.git$||')
    [[ "$base_url" == *"github"* ]] && {
        tree="/tree/"
    }
    branch=$(git rev-parse --abbrev-ref HEAD)
    relative_path=$(git rev-parse --show-prefix)
    open "${base_url}${tree}${branch}/${relative_path}$1"
}

function archiverepo {
    export REPO_NAME=$1;

    if [ ! -d "$REPO_NAME" ]
    then
        echo "$REPO_NAME is not a directory";
    else
        cd ${REPO_NAME};
        git remote -v > ../${REPO_NAME}.git \
            && cd .. \
            && rm -rf ${REPO_NAME};
    fi
}

function unarchiverepo {
    export REPO_MARKER=$1;

    REPO_NAME=$(echo $REPO_MARKER | sed 's|\.git||')
    REPO_MARKER="${REPO_NAME}.git"

    if [ ! -f "${REPO_MARKER}" ]
    then
        echo "Cannot find ${REPO_MARKER}";
    else
        REPO_URL=$(cat ${REPO_MARKER} | head -n 1 | awk '{print $2}')
        echo "Unarchiving ${REPO_NAME} from ${REPO_URL}"
        git clone ${REPO_URL} && rm ${REPO_MARKER} && cd ${REPO_NAME}
    fi
}


# Usefull Commands
function printHeader { printf "\n$(tput bold)$(tput setaf 2)============ $* ============$(tput sgr0)\n\n";}
function printFooter { printf "\n$(tput bold)$(tput setaf 2)====================================$(tput sgr0)\n\n";}

# Git aliases

function repobranches {
    show_branches_here ""
}

function show_branches_here {
    context="$1"
    for dir in `ls -d *  2> /dev/null`; do 
        if [[ -d ${dir} ]]; then
            cd $dir
            current_git_root=$(git rev-parse --show-toplevel > /dev/null 2>&1)
            if [[ $? != 0 ]]; then
                show_branches_here "${context}${dir}/"
                context="$1"
            else
                current_repo="$(tput setaf 7)$(basename `pwd`)"
                current_branch=$((git branch 2> /dev/null) | grep \* | cut -c3-)
                if [[ ${current_branch} == "master" || ${current_branch} == "main" || ${current_branch} == "dev" ]]; then
                    current_branch="$(tput bold)$(tput setaf 2)${current_branch}$(tput sgr0)"
                else
                    current_branch="$(tput bold)$(tput setaf 4)${current_branch}$(tput sgr0)"
                fi
                printf "$(tput bold)"        
                if [[ ${context} != "" ]]; then
                    printf "$(tput setaf 5)${context}"
                    context_length=${#context}
                    let padding=45-${context_length}
                    printf "%-${padding}s $(tput sgr0) \t==> %s\n" ${current_repo} "${current_branch}"
                else
                    printf "%-45s $(tput sgr0) \t==> %s\n" ${current_repo} "${current_branch}"
                fi
                
            fi
            cd ..
        fi
    done 
}

function repostatus {
    show_repostatus_here ""
}

function show_repostatus_here {
    context="$1"
    for dir in `ls -d *  2> /dev/null`; do 
        if [[ -d ${dir} ]]; then
            cd $dir
            current_git_root=$(git rev-parse --show-toplevel > /dev/null 2>&1)
            if [[ $? != 0 ]]; then
                show_repostatus_here "${context}${dir}/"
                context="$1"
            else
                current_repo="$(tput setaf 7)$(basename `pwd`)"
                git remote update > /dev/null  2>&1
                repo_status=$(git status -uno | grep 'Your branch')
                current_branch=$((git branch 2> /dev/null) | grep \* | cut -c3-)
                if [[ ${repo_status} == "" ]]; then
                    repo_status="No diff from remote"
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 2)${repo_status}$(tput sgr0)"
                elif [[ ${repo_status} == "Your branch is up to date with"* ]]; then
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 2)${repo_status}$(tput sgr0)"
                else
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 4)${repo_status}$(tput sgr0)"
                fi
                printf "$(tput bold)"        
                if [[ ${context} != "" ]]; then
                    printf "$(tput setaf 5)${context}"
                    context_length=${#context}
                    let padding=45-${context_length}
                    printf "%-${padding}s $(tput sgr0) \t==> %s\n" ${current_repo} "${repo_status}"
                else
                    printf "%-45s $(tput sgr0) \t==> %s\n" ${current_repo} "${repo_status}"
                fi
                
            fi
            cd ..
        fi
    done 
}


function reposync {
    syncrepos_here ""
}

function syncrepos_here {
    context="$1"
    for dir in `ls -d *  2> /dev/null`; do 
        if [[ -d ${dir} ]]; then
            cd $dir
            current_git_root=$(git rev-parse --show-toplevel > /dev/null 2>&1)
            if [[ $? != 0 ]]; then
                syncrepos_here "${context}${dir}/"
                context="$1"
            else
                current_repo="$(tput setaf 7)$(basename `pwd`)"
                git pull --rebase origin `git-branch-name` > /dev/null  2>&1
                repo_status=$(git status -uno | grep 'Your branch')
                current_branch=$((git branch 2> /dev/null) | grep \* | cut -c3-)
                if [[ ${repo_status} == "" ]]; then
                    repo_status="No diff from remote"
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 2)${repo_status}$(tput sgr0)"
                elif [[ ${repo_status} == "Your branch is up to date with"* ]]; then
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 2)${repo_status}$(tput sgr0)"
                else
                    repo_status="$(tput bold)${current_branch}: $(tput setaf 4)${repo_status}$(tput sgr0)"
                fi
                printf "$(tput bold)"        
                if [[ ${context} != "" ]]; then
                    printf "$(tput setaf 5)${context}"
                    context_length=${#context}
                    let padding=45-${context_length}
                    printf "%-${padding}s $(tput sgr0) \t==> %s\n" ${current_repo} "${repo_status}"
                else
                    printf "%-45s $(tput sgr0) \t==> %s\n" ${current_repo} "${repo_status}"
                fi
                
            fi
            cd ..
        fi
    done 
}

function git-branch-name {
	git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3-
}


if !alias gcm >/dev/null 2>&1; then # Define only when not using the zsh git plugin which defines this to support main and trunk as well
  alias gcm='printHeader "Git Checkout => Master" ;git checkout master; printFooter'
fi
function gcheckout { printHeader "Git Checkout ($*)" ; git checkout $*; printFooter; }
alias gstatus='printHeader Git Status ;git status; printFooter'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
function gadd { printHeader Git Add ;git add $*; printFooter; }

alias gdiff='git --no-pager diff'
alias gdifff='GIT_PAGER=cat git diff --no-ext-diff'

alias gunstage='git reset HEAD'
function grevert { printHeader Git Revert \(checkout -- \); git checkout -- $*; printFooter; }
function stash { printHeader Git Stash \($*\) ;git stash save "$*"; printFooter; }
alias unstash='printHeader Git Unstash ;git stash pop; printFooter'
alias stashlist='printHeader Git stash list;git stash list; printFooter'
alias stashshow='printHeader Git stash show;git stash show; printFooter'
alias gpull='printHeader Git Pull \(rebase\)  ;git pull --rebase origin `git-branch-name`; printFooter'
function gcommit { printHeader Git Commit \($*\) ;git commit -m "$*"; printFooter; }
alias gpush='printHeader Git Push \(Branch only\) ;git push --tags origin HEAD; printFooter'

alias cdroot='cd $(git rev-parse --show-toplevel)'

function cdrepo() {
    PATTERN=$(echo $* | sed 's/ /\.\*/g');
    
    DIR_TO_SWITCH_TO=$(/opt/homebrew/bin/fd '\.git$' --prune -u -t d --exclude '.terraform' --exclude 'node_modules' -x echo {//} | sed 's|\.\/||' | egrep -i "${PATTERN}" | sort | fzf --preview 'tree -L 2 -C {}')
    if [[ $? -eq 0 ]];
    then
        cd $DIR_TO_SWITCH_TO;
    fi
}