#DOC# Navigation;cdfile;Changes dir to the directory a file is located in
#DOC# Navigation;cdd;Changes dir to the first directory in the tree which partially matches the name
#DOC# Navigation;cdmod;Goes to the root of the current module (Where a pom.xml/build.gradle/build.gradle.kts/package.json/requirements.txt/go.mod can be found)
#DOC# Navigation;cdz;Fuzzy directory change
#DOC# Navigation;cdzf;Fuzzy directory change to a file
#DOC# Navigation;mcd;Make and Change directory
#DOC# Navigation;p;Fuzzy jump to code project (in git repo)
#DOC# Navigation;r;Fuzzy jump to git repository

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

function cdd { [[ $# == 0 ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)cdd <regex fragments> $(tput sgr0)\n\tE.g. cdd src main impl ==> will cd to a path containing 'src', 'main' and 'impl' in the path\n" && return 1; PATTERN=$(echo $* | sed 's/ /\.\*/g'); dir=$(find . -type d | egrep "$PATTERN" | head -1); cd "${dir}"; }
function mcd { [[ $# != 1 ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)mcd <dir> $(tput sgr0)\n" && return 1; mkdir -p $1; cd $1; }
function cdfile { [[ $# != 1 ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)cdfile <file>$(tput sgr0)\n" && return 1; dir=$(echo $1 | sed 's/\(.*\/\).*/\1/'); cd $dir; }

alias cdmod='while [[ ! -f pom.xml && ! -f build.gradle && ! -f build.gradle.kts && ! -f package.json && ! -f requirements.txt && ! -f go.mod  && $(pwd) != "/" ]] ; do cd ..; done'

function smart_change_dir_to_child() {
    if [[ $# -gt 0 ]]; then
        if [[ -d $1 ]]; then
            # Directory exists - switching to it"
            cd $1
        else
            # Directory does not exist - applying smart matching
            PATTERN=$(echo $* | sed 's/ /\.\*/g');
            MATCHING_DIR=`ls | egrep -i "${PATTERN}" | head -n 1`
            if [[ -z $MATCHING_DIR ]]; then
                echo "${BRIGHT}${YELLOW}No subdirectories matching \"${RED}${PATTERN}${YELLOW}\""
            else   
                cd ${MATCHING_DIR}
            fi
        fi
    else
        ls -la | egrep '^d' | awk '{print $NF}' | egrep -v '^\.$|^\.\.$' 
    fi
}

function cdz() {
    PATTERN=$(echo $* | sed 's/ /\.\*/g');

    TEMP_LIST_FILE=$(mktemp)
	
    fd -t d -H . --exclude '.terraform' --exclude 'node_modules' --exclude '.git' | egrep -i "${PATTERN}" > "${TEMP_LIST_FILE}"

    if [[ "$(cat "${TEMP_LIST_FILE}" | wc -l)" -eq "1" ]]; 
    then 
        DIR_TO_SWITCH_TO=$(cat "${TEMP_LIST_FILE}")
    else
        DIR_TO_SWITCH_TO=$(cat "${TEMP_LIST_FILE}" | fzf +m --preview 'tree -L 2 -C {}')
    fi

    if [[ $? -eq 0 ]];
    then
        cd $DIR_TO_SWITCH_TO;
    fi

    rm "${TEMP_LIST_FILE}"
}

function cdzf() {
    PATTERN=$(echo $* | sed 's/ /\.\*/g');

    TEMP_LIST_FILE=$(mktemp)
	
    fd -t f -H . --exclude '.terraform' --exclude 'node_modules' --exclude '.git' | egrep -i "${PATTERN}" > "${TEMP_LIST_FILE}"

    if [[ "$(cat "${TEMP_LIST_FILE}" | wc -l)" -eq "1" ]]; 
    then 
        FILE_TO_SWITCH_TO=$(cat "${TEMP_LIST_FILE}")
    else
        FILE_TO_SWITCH_TO=$(cat "${TEMP_LIST_FILE}" | fzf --preview 'bat --style=numbers --color=always --line-range :500 {}')
    fi
    rm "${TEMP_LIST_FILE}"

    if [[ $? -eq 0 ]];
    then
        DIR_TO_SWITCH_TO=$(dirname $FILE_TO_SWITCH_TO)
        FILE_NAME=$(basename $FILE_TO_SWITCH_TO)
        cd $DIR_TO_SWITCH_TO;
        ls -la $FILE_NAME
    fi
}
