OS=`uname -s`

#A# epoc;Converts dates from "epoch" format to human format
if [ "${OS}" = "Linux" ] ; then
	function epoc() { [[ $# == 0 ]] && SECONDS_SINCE_EPOCH=$(date +%s); [[ "$1" == "-h" ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold) epoc [<seconds-since-epoch|milli-seconds-since-epoch>]$(tput sgr0)\n$(tput bold)$(tput setaf 2)Examples:$(tput sgr0)\n\t$(tput bold)epoc 1404382131$(tput sgr0)\n\t$(tput bold) epoc 1404305405000\n" && return 1; [[ $# == 1 ]] && SECONDS_SINCE_EPOCH=$1; [[ $(printf ${SECONDS_SINCE_EPOCH} | wc -c) -gt 10 ]] && let SECONDS_SINCE_EPOCH=${SECONDS_SINCE_EPOCH}/1000; printf "\n$(tput bold)$(tput bold)$(tput setaf 2)%-20s\t| %-35s\t| %-35s$(tput sgr0)\n" "Seconds Since Epoch" "Time (Local)" "Time (GMT)"; printf "%-20s\t| %-35s\t| %-35s\n\n" ${SECONDS_SINCE_EPOCH} "$(date -d @${SECONDS_SINCE_EPOCH} '+%d-%h-%Y %H:%M:%S %Z (%:z)')" "$(export TZ=GMT; date -d @${SECONDS_SINCE_EPOCH} '+%d-%h-%Y %H:%M:%S %Z (%:z)')" ; }
else
	function epoc() { [[ $# == 0 ]] && SECONDS_SINCE_EPOCH=$(date +%s); [[ "$1" == "-h" ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold) epoc [<seconds-since-epoch|milli-seconds-since-epoch>]$(tput sgr0)\n$(tput bold)$(tput setaf 2)Examples:$(tput sgr0)\n\t$(tput bold)epoc 1404382131$(tput sgr0)\n\t$(tput bold)epoc 1404305405000\n" && return 1; [[ $# == 1 ]] && SECONDS_SINCE_EPOCH=$1; [[ $(printf ${SECONDS_SINCE_EPOCH} | wc -c) -gt 10 ]] && let SECONDS_SINCE_EPOCH=${SECONDS_SINCE_EPOCH}/1000; printf "\n$(tput bold)$(tput bold)$(tput setaf 2)%-20s\t| %-35s\t| %-35s$(tput sgr0)\n" "Seconds Since Epoch" "Time (Local)" "Time (GMT)"; printf "%-20s\t| %-35s\t| %-35s\n\n" ${SECONDS_SINCE_EPOCH} "$(date -r ${SECONDS_SINCE_EPOCH} '+%d-%h-%Y %H:%M:%S %Z (%z)' | sed 's/(+\([0-9][0-9]\)/(+\1:/')" "$(export TZ=GMT; date -r ${SECONDS_SINCE_EPOCH} '+%d-%h-%Y %H:%M:%S %Z (%z)' | sed 's/(+\([0-9][0-9]\)/(+\1:/')" ; }
fi

#A# ts;Displays epoc timestamps to human readable in output redirection
if [ "${OS}" = "Linux" ] ; then
	alias ts='awk '"'"'match($0, /[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]+/) { ts=substr( $0, RSTART, RLENGTH ); if (length(ts)>10) ts=substr(ts,1,10); printf $0" ==> "; system("date -d @"ts" \"+%d-%h-%Y %H:%M:%S %Z\"");}'"' | grep --color '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*'"
else
	alias ts='awk '"'"'match($0, /[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]+/) { ts=substr( $0, RSTART, RLENGTH ); if (length(ts)>10) ts=substr(ts,1,10); printf $0" ==> "; system("date -r "ts" \"+%d-%h-%Y %H:%M:%S %Z\"");}'"' | grep --color '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*'"
fi

#A# title;Sets or resets the terminals title
function set_tab_title {
     if [[ $# == 0 ]]; then
         printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)title -r$(tput sgr0)\t# Resets the title\n"; 
         printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)title <title>$(tput sgr0)\t# Sets the tile\n"; 
         printf "$(tput bold)$(tput setaf 2) e.g.:$(tput sgr0) $(tput bold)title this is awesome!$(tput sgr0)\n"; 
         return 1;
    fi
    if [[ $# == 1 && $1 == "-r" ]] ; then
        DISABLE_AUTO_TITLE="false"
        echo -ne "\e]1;${PWD: -10}\a";
        return 0;
    else 
        TITLE=$*; 
        echo -ne "\e]1;${TITLE}\a";
    fi
}

alias tt='DISABLE_AUTO_TITLE="true" && set_tab_title'

#A# cdfile;Changes dir to the directory a file is located in
function cdfile { [[ $# != 1 ]] && printf "$(tput bold)$(tput setaf 1)Usage:$(tput sgr0) $(tput bold)cdfile <file>$(tput sgr0)\n" && return 1; dir=$(echo $1 | sed 's/\(.*\/\).*/\1/'); cd $dir; }

function smart_change_dir_to_child() {
    if [[ $# -gt 0 ]]; then
        if [[ -d $1 ]]; then
            # Directory exists - switching to it"
            cd $1
        else
            # Directory does not exist - applying smart matching
            PATTERN=$(echo $* | sed 's/ /\.\*/g');
            MATCHING_DIR=`ls | egrep -i "${PATTERN}" | head -n 1`
            if [[ -z $MATCHING_DIR ]]; then
                echo "${BRIGHT}${YELLOW}No subdirectories matching \"${RED}${PATTERN}${YELLOW}\""
            else   
                cd ${MATCHING_DIR}
            fi
        fi
    else
        ls -l | egrep '^d' | awk '{print $NF}'
    fi
}

complete -W "$(ls ${SOME_DIR})" _go_some_dir
function _go_some_dir() {
    rgb R G B
    cd ${SOME_DIR}
    smart_change_dir_to_child $*
}

function edwhich() {
  edit `which $1`
}

# Notes

NOTES_DIR="${HOME}/OneDrive/Notes"
function gonotes() {
    cd "${NOTES_DIR}"
}

function mute() {
    currentVolume=$(echo $(osascript -e 'get volume settings' | cut -d',' -f1 | cut -d':' -f2)/10 | bc)
    osascript -e "set Volume 0"
    sleep 30
    osascript -e "set Volume ${currentVolume}"
}

PERSONAL_HOME=${HOME}/Personal
DOT_FILES_HOME=${PERSONAL_HOME}/My-Dot-Files
DOCKER_IMAGES_HOME=${PERSONAL_HOME}/docker-images
HELLO_WORLD_HOME=${PERSONAL_HOME}/hello-world

source ${DOT_FILES_HOME}/.define.colors
${DOT_FILES_HOME}/.scripts/uptimeChecker

complete -W "$(ls ${PERSONAL_HOME})" gopersonal
function gopersonal() {
  rgb 158 100 180
  cd ${PERSONAL_HOME}
  smart_change_dir_to_child $*
}

complete -W "$(ls ${HELLO_WORLD_HOME})" gohelloworld
function gohelloworld() {
  rgb 50 0 180
  cd ${HELLO_WORLD_HOME}
  smart_change_dir_to_child $*
}

PATH=${PATH}:${DOT_FILES_HOME}/.scripts

function godotfiles() {
  rgb 58 200 180
  cd ${DOT_FILES_HOME}
}

function godockerimages() {
  rgb 58 200 180
  cd ${DOCKER_IMAGES_HOME}
}
